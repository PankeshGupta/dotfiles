#!/usr/bin/env bash

echo Setting up Python environment...

# create a virtual environment and activate it
virtualenv venv 
source venv/bin/activate

# install the python dependencies - feel free to uninstall if any of these are unnecessary
pip install Flask gunicorn Flask-SQLAlchemy SQLAlchemy redis
pip freeze > requirements.txt

echo Creating boilerplate scripts

# create the main script
run="from app import app 
import sys
import subprocess

if __name__ == '__main__':
	app.run()
"
echo "$run" > run.py 

# create the config.py file
config="# figure out what kind of environment we're in 
MODE = 'LOCAL'
DEBUG = True

SQLALCHEMY_DATABASE_URI = 'postgres://postgres@localhost:5432/flask_template'
SECRET_KEY = 'HTN3NTKDK349023sdfsj9234'

DATABASE_CONNECT_OPTIONS = {}
THREADS_PER_PAGE = 8
CSRF_ENABLED = True
"

echo "$config" > config.py

# create the folder structure
mkdir -p app/{static,templates,main,test}
cd app

testframe="#!/usr/bin/env python
import pdb
import unittest
import random

from app import app, db
from app.main.models import *

class TestMain(unittest.TestCase):
    def setUp(self):
        # app.config.from_object('testing_configuration') # put in a testing configuration
        db.session.close()
        db.drop_all()
        db.create_all()

    def test_index(self):
        pass 
"

echo "$testframe" > test/__init__.py

init="#!/usr/bin/env python
import os
import traceback
from flask import Flask, Blueprint, request, render_template, g, session, redirect, url_for, make_response

# import Flask extensions
from flask.ext.sqlalchemy import SQLAlchemy

app = Flask(__name__)
app.config.from_object('config')
basedir = os.path.abspath(os.path.dirname(__file__))

db = SQLAlchemy(app)

from main.controllers import main as main_module
app.register_blueprint(main_module)

app.secret_key = \"sajfdasf1389flj1u34ljsdfldksalf1231e89sfdshfk\"

# Sample HTTP error handling
@app.errorhandler(404)
def not_found(error):
	return '404, not found. Please try a different URL'

@app.route('/', methods=['GET'])
def index():
	return render_template('index/index.html')
"
echo "$init" > __init__.py 

# set up the framework for the main application code
cd main 

# make this a module
touch __init__.py

models="#!/usr/bin/env python
from app import db
from werkzeug.security import generate_password_hash, check_password_hash

class Example(db.Model):
    __tablename__ = \"example\"
    id = db.Column(db.Integer, primary_key=True)

    def __init__(self):
		pass

    def __repr__(self):
        return '<Example {}>'.format(self.id)
"

echo "$models" > models.py

controllers="#!/usr/bin/env python
import os
import traceback
from flask import Flask, Blueprint, request, render_template, g, session, redirect, url_for, make_response

main = Blueprint('main', __name__)

@main.route('/main')
def main_func():
	return 42
"

echo "$controllers" > controllers.py

cd  ..

cd templates
mkdir index && cd index

index="
Welcome to the @rachtsingh Flask quickstart template. I'll take care of everything
"

echo "$index" > index.html

cd ../..

# now set up the database

echo Setting up Postgres database \`flask_template\`

# start postgres
pg_ctl start -l logfile
sleep 2

# ask the user if they'd like to drop the database 'flask_template'
while [[ true ]]; do
    read -n1 -p "\nDo you want to recreate the 'flask_template' database? This will delete the current database, if any [y/n]: " answer
    case $answer in 
        y|Y) 
            break;;
        n|N) 
            exit;;
        *) continue ;;
    esac
done

dropdb flask_template
createdb flask_template
